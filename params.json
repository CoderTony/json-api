{"name":"JSON API","tagline":"","body":"# JSON API\r\n\r\n**This document is a work-in-progress and subject to revision. This document will clearly state when it is considered a final version and what that version number is.**\r\n\r\nThere are two JSON API styles:\r\n\r\n* The ID Style\r\n* The URL Style\r\n\r\nThe ID style is the easiest to get started with, but requires that your clients be able to guess the URLs for related documents. It also locks your API into a particular URL structure, which may become a problem as your API grows.\r\n\r\nThe URL style requires less guessing on the client side, and makes clients more resilient to API changes, but is trickier to use with relationships and compound documents.\r\n\r\nIn general, you should be able to start with an ID-based JSON API and upgrade to a URL-based API, if you want.\r\n\r\n## Document\r\n\r\nIn this specification, the term \"document\" refers to a single object with a set of attributes and relationships.\r\n\r\nA JSON response may include multiple documents, as described below.\r\n\r\n## ID-Based JSON API\r\n\r\n### Top Level\r\n\r\nThe top-level of a JSON API document **MAY** have the following keys:\r\n\r\n* `meta`: meta-information about a resource, such as pagination\r\n* Other resource names (`posts`, `comments`, `people`, etc.) \r\n\r\n### Singular Resources\r\n\r\nIf the value of a resource key is a JSON object, the value represents a single document.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    // an individual post document\r\n  }\r\n}\r\n```\r\n\r\nThe document **MUST** contain an `id` key. \r\n\r\n### Resource Collections\r\n\r\nIf the value of a resource key is a JSON array, the value represents a list of documents.\r\n\r\n```js\r\n{\r\n  \"posts\": [{\r\n    // an individual post document\r\n  }, {\r\n    // an individual post document\r\n  }]\r\n}\r\n```\r\n\r\nEach document in the list **MUST** contain an `id` key.\r\n\r\n### IDs\r\n\r\nThe `\"id\"` key in a document represents a unique identifier for the document, scoped to the document's type. The type scope is implicit, and hardcoded into clients of the API.\r\n\r\n### Attributes\r\n\r\nOther than the `\"rels\"` and `\"id\"` keys, every key in a document represents an attribute. An attribute's value may be any JSON value.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\"\r\n  }\r\n}\r\n```\r\n\r\n### Relationships\r\n\r\nThe value of the `\"rels\"` key is a JSON object that represents related documents.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": 9,\r\n      \"comments\": [ 5, 12, 17, 20 ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### To-Many Relationships\r\n\r\nA to-many relationship is represented as a JSON array of IDs.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": [ 5, 12, 17, 20 ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAn API that provides a to-many relationship as an array of IDs **MUST** respond to a `GET` request with a list of the specified documents with a URL formed by joining:\r\n\r\n* A base URL that represents the type of the related resource (this must be hardcoded in the client)\r\n* `?ids=`\r\n* A comma-separated list of the specified IDs\r\n\r\nIn the above example, a `GET` request to `/comments?ids=5,12,17,20` returns a document containing the four specified comments.\r\n\r\n#### To-One Relationships\r\n\r\nA to-one relationship is represented as a single string or number value.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": 17\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAn API that provides a to-one relationship as an ID **MUST** respond to a `GET` request with the specified document with a URL formed by joining:\r\n\r\n* A base URL that represents the type of the related resource (this must be hardcoded in the client)\r\n* `/`\r\n* The specified ID\r\n\r\nIn the above example, a `GET` request to `/people/17` returns a document containing the specified author.\r\n\r\n### Compound Documents\r\n\r\nTo save HTTP requests, it may be convenient to send related documents along with the requested documents.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": 9\r\n    }\r\n  },\r\n  \"people\": [{\r\n    \"id\": 9,\r\n    \"name\": \"@d2h\"\r\n  }]\r\n}\r\n```\r\n\r\nThe related documents are provided as an additional top-level document or document list whose key is a name that represents the document type.\r\n\r\nThe linkage between the key under `\"rels\"` and the top-level keys is hardcoded into the client.\r\n\r\n## URL-Based JSON API\r\n\r\nIn the above description of ID-based JSON, there were several places where information about the location of related resources needed to be hardcoded into the client.\r\n\r\nThe goal of the URL-Based JSON API is to eliminate the need for those specific instances of hardcoded information.\r\n\r\n### Top Level\r\n\r\nThe top-level of a JSON API document **MAY** have the following keys:\r\n\r\n* `meta`: meta-information about a resource, such as pagination\r\n* `rels`: in compound resources, information about relationships that would otherwise need to be repeated\r\n* Other resource names (`posts`, `comments`, `people`, etc.) \r\n\r\n### Singular Resources\r\n\r\nIf the value of a resource key is a JSON object, the value represents a single document.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    // an individual post document\r\n  }\r\n}\r\n```\r\n\r\nThe document **MAY** contain an `id` key. \r\n\r\n### Resource Collections\r\n\r\nIf the value of a resource key is a JSON array, the value represents a list of documents.\r\n\r\n```js\r\n{\r\n  \"posts\": [{\r\n    // an individual post document\r\n  }, {\r\n    // an individual post document\r\n  }]\r\n}\r\n```\r\n\r\nEach document in the list **MAY** contain an `id` key.\r\n\r\n### IDs\r\n\r\nThe `\"id\"` key in a document represents a unique identifier for the document, scoped to the document's type. It can be used with URL templates to fetch related records, as described below.\r\n\r\n### Attributes\r\n\r\nOther than the `\"rels\"` and `\"id\"` keys, every key in a document represents an attribute. An attribute's value may be any JSON value.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\"\r\n  }\r\n}\r\n```\r\n\r\n### Relationships\r\n\r\nThe value of the `\"rels\"` key is a JSON object that represents related documents.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": \"http://example.com/people/1\",\r\n      \"comments\": \"http://example.com/comments/5,12,17,20\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n#### To-Many Relationships\r\n\r\nA to-many relationship is a string value that represents a URL.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": \"http://example.com/posts/1/comments\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAn API that provides a to-many relationship as a URL **MUST** respond to a `GET` request with a list of the specified documents with the specified URL.\r\n\r\nIn the above example, a `GET` request to `/posts/1/comments` returns a document containing the four specified comments.\r\n\r\n#### To-One Relationships\r\n\r\nA to-one relationship is represented as a string value that represents a URL.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": \"http://example.com/people/17\"\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nAn API that provides a to-one relationship as an ID **MUST** respond to a `GET` request with the specified document with the specified URL.\r\n\r\nIn the above example, a `GET` request to `/people/17` returns a document containing the specified author.\r\n\r\n### URL Template Shorthands\r\n\r\nWhen returning a list of documents from a response, a top-level `\"rels\"` object can specify a URL template that should be used for all documents.\r\n\r\nExample:\r\n\r\n```js\r\n{\r\n  \"rels\": {\r\n    \"posts.comments\": \"http://example.com/posts/{post.id}/comments\"\r\n  },\r\n  \"posts\": [{\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\"\r\n  }, {\r\n    \"id\": 2,\r\n    \"title\": \"The Parley Letter\"\r\n  }]\r\n}\r\n```\r\n\r\nIn this example, fetching `/posts/1/comments` will fetch the comments for `\"Rails is Omakase\"` and fetching `/posts/2/comments` will fetch the comments for `\"The Parley Letter\"`.\r\n\r\n```js\r\n{\r\n  \"rels\": {\r\n    \"posts.comments\": \"http://example.com/comments/{posts.comments}\"\r\n  },\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": [ 1, 2, 3, 4 ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIn this example, the `posts.comments` variable is expanded by \"exploding\" the array specified in the `\"rels\"` section of each post. The [URL template specification][1] specifies that the default explosion is to join the array members by a comma, so in this example, fetching `/comments/1,2,3,4` will return a list of all comments.\r\n\r\n[1]: https://tools.ietf.org/html/rfc6570\r\n\r\nThis example shows how you can start with a list of IDs and then upgrade to specifying a different URL pattern than the default.\r\n\r\nThe top-level `\"rels\"` key has the following behavior:\r\n\r\n* Each key is a dot-separated path that points at a repeated relationship. For example `\"posts.comments\"` points at the `\"comments\"` relationship in each repeated document under `\"posts\"`.\r\n* The value of each key is interpreted as a URL template.\r\n* For each document that the path points to, act as if it specified a relationship formed by expanding the URL template with the non-URL value actually specified.\r\n\r\nHere is another example that uses a has-one relationship:\r\n\r\n```js\r\n{\r\n  \"rels\": {\r\n    \"posts.author\": \"http://example.com/people/{posts.author}\"\r\n  },\r\n  \"posts\": [{\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": 12\r\n    }\r\n  }, {\r\n    \"id\": 2,\r\n    \"title\": \"The Parley Letter\",\r\n    \"rels\": {\r\n      \"author\": 12\r\n    }\r\n  }, {\r\n    \"id\": 3,\r\n    \"title\": \"Dependency Injection is Not a Virtue\",\r\n    \"rels\": {\r\n      \"author\": 12\r\n    }\r\n  }]\r\n}\r\n```\r\n\r\nIn this example, the author URL for all three posts is `/people/12`.\r\n\r\nTop-level URL templates allow you to specify relationships as IDs, but without requiring that clients hard-code information about how to form the URLs. \r\n\r\n### Compound Documents\r\n\r\nTo save HTTP requests, it may be convenient to send related documents along with the requested documents.\r\n\r\nIn this case, a bit of extra metadata for each relationship can link together the documents.\r\n\r\n```js\r\n{\r\n  \"rels\": {\r\n    \"posts.author\": {\r\n      \"url\": \"http://example.com/people/{post.author}\",\r\n      \"type\": \"people\"\r\n    },\r\n    \"posts.comments\": {\r\n      \"url\": \"http://example.com/comments/{post.comments}\",\r\n      \"type\": \"comments\"\r\n    }\r\n  }\r\n  \"posts\": [{\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": 9,\r\n      \"comments\": [ 1, 2, 3 ]\r\n   }, {\r\n    \"id\": 2,\r\n    \"title\": \"The Parley Letter\",\r\n    \"rels\": {\r\n      \"author\": 9,\r\n      \"comments\": [ 4, 5 ]\r\n   }, {\r\n    \"id\": 1,\r\n    \"title\": \"Dependency Injection is Not a Virtue\",\r\n    \"rels\": {\r\n      \"author\": 9,\r\n      \"comments\": [ 6 ]\r\n    }\r\n  }],\r\n  \"people\": [{\r\n    \"id\": 9,\r\n    \"name\": \"@d2h\"\r\n  }],\r\n  \"comments\": [{\r\n    \"id\": 1,\r\n    \"body\": \"Mmmmmakase\"\r\n  }, {\r\n    \"id\": 2,\r\n    \"body\": \"I prefer unagi\"\r\n  }, {\r\n    \"id\": 3,\r\n    \"body\": \"What's Omakase?\"\r\n  }, {\r\n    \"id\": 4,\r\n    \"body\": \"Parley is a discussion, especially one between enemies\"\r\n  }, {\r\n    \"id\": 5,\r\n    \"body\": \"The parsley letter\"\r\n  }, {\r\n    \"id\": 6,\r\n    \"body\": \"Dependency Injection is Not a Vice\"\r\n  }]\r\n}\r\n```\r\n\r\nThe benefit of this approach is that when the same document is referenced multiple times (in this example, the author of the three posts), it only needs to be presented a single time in the document.\r\n\r\nBy always combining documents in this way, a client can consistently extract and wire up references.\r\n\r\nJSON API documents **MAY** specify the URL for a document in a compound response by specifying a `\"url\"` key:\r\n\r\n```js\r\n{\r\n  // ...\r\n  \"comments\": [{\r\n    \"url\": \"http://example.com/comments/1\",\r\n    \"id\": 1,\r\n    \"body\": \"Mmmmmakase\"\r\n  }, {\r\n    \"url\": \"http://example.com/comments/2\",\r\n    \"id\": 2,\r\n    \"body\": \"I prefer unagi\"\r\n  }, {\r\n    \"url\": \"http://example.com/comments/3\",\r\n    \"id\": 3,\r\n    \"body\": \"What's Omakase?\"\r\n  }, {\r\n    \"url\": \"/comments/1\",\r\n    \"id\": 4,\r\n    \"body\": \"Parley is a discussion, especially one between enemies\"\r\n  }, {\r\n    \"url\": \"/comments/1\",\r\n    \"id\": 5,\r\n    \"body\": \"The parsley letter\"\r\n  }, {\r\n    \"url\": \"/comments/1\",\r\n    \"id\": 6,\r\n    \"body\": \"Dependency Injection is Not a Vice\"\r\n  }]\r\n}\r\n```","google":"<script>   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-40609539-1', 'jsonapi.org');   ga('send', 'pageview');  </script>","note":"Don't delete this file! It's used internally to help with page regeneration."}