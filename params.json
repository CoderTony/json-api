{"name":"JSON API","tagline":"","body":"# JSON API\r\n\r\n**This document is a work-in-progress and subject to revision. This document will clearly state when it is considered a final version and what that version number is.**\r\n\r\n## Top Level\r\n\r\nThe top-level of a JSON API document has the following keys:\r\n\r\n* Resource names (`posts`, `comments`, `people`, etc.)\r\n* A `meta` section\r\n\r\n## Singular Resources\r\n\r\nIf the value of a resource name is a JSON object, it represents a single document.\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    // an individual post document\r\n  }\r\n}\r\n```\r\n\r\n## Resource Collections\r\n\r\nIf the value of a resource name is a JSON array, it represents a list of documents.\r\n\r\n```js\r\n{\r\n  \"posts\": [{\r\n    // an individual post document\r\n  }, {\r\n    // an individual post document\r\n  }]\r\n}\r\n```\r\n\r\n## JSON API Document\r\n\r\nA JSON API document is a list of key/value pairs that represent either attributes or relationships.\r\n\r\nAttribute or relationship keys **SHOULD** be camelcased.\r\n\r\n### Attributes\r\n\r\nAn attribute's value can be any JSON value:\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    title: \"Rails is Omakase\",\r\n    commentCount: 23\r\n    isDraft: false\r\n  }\r\n}\r\n```\r\n\r\n### To-Many Relationships (Using IDs)\r\n\r\nTo specify a to-many relationship that points to a list of IDs, include it under a `\"rels\"` key: \r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": [ 1, 3, 12, 17 ]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf a to-many relationship is specified as a list of IDs, it **SHOULD** be possible to fetch a collection of the related documents by making a simple `GET` request with a URL composed of:\r\n\r\n* The URL of the current document\r\n* The part of relationship name converted to underscore format\r\n* A `?` followed by the list of IDs, comma-separated  \r\n\r\n### To-Many Relationships (Using URLs)\r\n\r\nTo specify a to-many relationship that points to a URL, include it under a `\"rels\"` key:\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": { \"url\": \"http://example.com/posts/1/comments\" }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf a to-many relationship is specified as a URL, it **MUST** be possible to fetch a collection of the related documents by using a simple `GET` request to the specified URL.\r\n\r\n### To-Many Relationships (Using URL Templates)\r\n\r\nYou may also specify a URL template for a relationship as both an array of IDs and a URL template (using `{ids}` as the parameter):\r\n\r\n```js\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": {\r\n        \"url\": \"http://example.com/posts/1/comments/{ids}\",\r\n        \"ids\": [ 1, 2, 4, 12 ]\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf a to-many relationship is specified both as a URL and an array of IDs, it **MUST** be possible to fetch a collection of the related documents by:\r\n\r\n* Expanding the URL template by substituting the array of IDs into the `{ids}` variable. This will result in it being replaced with the comma-separated list of IDs.\r\n* Performing a simple `GET` on the expanded URL\r\n\r\n### To-One Relationships (Using ID)\r\n\r\nTo specify a to-one relationship that points to an ID, use a relationship name with an `ID` suffix whose value is a JSON String or Number.\r\n\r\n```\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\"\r\n    \"rels\": {\r\n      \"author\": 9,\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf a to-many relationship is specified as an ID, it **SHOULD** be possible to fetch the related documents by making a simple `GET` request with a URL composed of:\r\n\r\n* The URL of the current document\r\n* A `/` followed by the part of relationship name before the `ID` suffix, converted to underscore format\r\n* A `/` followed by the ID\r\n\r\n### To-One Relationships (Using URL)\r\n\r\nTo specify a to-one relationship that points to a URL, use a relationship name with a `URL` suffix whose value is a URL.\r\n\r\n```\r\n{\r\n  \"posts\": {\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"author\": { \"url\": \"http://example.com/posts/1/author\" },\r\n    }\r\n  }\r\n}\r\n```\r\n\r\nIf a to-many relationship is specified as a URL, it **MUST** be possible to fetch the related document by using a simple `GET` request to the specified URL.\r\n\r\n### A Resource With Multiple Documents\r\n\r\nSo far, all resources have contained a single document. You may want to combine multiple documents into a single resource to reduce HTTP queries.\r\n\r\n```\r\n{\r\n  \"rels\": {\r\n    \"posts.author\": \"http://example.com/people/{posts.id}\",\r\n    \"posts.comments\": \"http://example.com/{posts.id}/comments/{posts.comments.ids}\"\r\n  },\r\n  \"posts\": [{\r\n    \"id\": 1,\r\n    \"title\": \"Rails is Omakase\",\r\n    \"rels\": {\r\n      \"comments\": [ 1, 2, 5, 17 ]\r\n      \"author\": 17\r\n    }\r\n  }, {\r\n    \"id\": 2,\r\n    \"title\": \"The Parley Letter\",\r\n    \"rels\": {\r\n      \"comments\": [ 3, 4, 6 ]\r\n      \"author\": 17\r\n    }\r\n  }],\r\n  \"http://example.com/people/{id}\": [{\r\n    \"id\": 17,\r\n    \"twitterName\": \"@d2h\"\r\n  }]\r\n}\r\n```\r\n\r\nIn this case, each relationship specifies a type to link it with \r\n\r\n\r\n\r\n### Meta Sections","google":"<script>   (function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){   (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),   m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)   })(window,document,'script','//www.google-analytics.com/analytics.js','ga');    ga('create', 'UA-40609539-1', 'jsonapi.org');   ga('send', 'pageview');  </script>","note":"Don't delete this file! It's used internally to help with page regeneration."}